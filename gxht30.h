#pragma once

#include <Wire.h>

// I2C addresses
#define GXHT30_ADDRESS_DEFAULT 0x44
#define GXHT30_ADDRESS_ALTERED 0x45

// Single shot mode
#define GXHT30_SSM_CLKST_ENABLED_RPTY_HIGH 0x2C06
#define GXHT30_SSM_CLKST_ENABLED_RPTY_MEDIUM 0x2C0D
#define GXHT30_SSM_CLKST_ENABLED_RPTY_LOW 0x2C10
#define GXHT30_SSM_CLKST_DISABLED_RPTY_HIGH 0x2400
#define GXHT30_SSM_CLKST_DISABLED_RPTY_MEDIUM 0x240B
#define GXHT30_SSM_CLKST_DISABLED_RPTY_LOW 0x2416

// Periodic data acquisition mode
#define GXHT30_PAM_MPS05_HIGH 0x2032
#define GXHT30_PAM_MPS05_MEDIUM 0x2024
#define GXHT30_PAM_MPS05_LOW 0x202F
#define GXHT30_PAM_MPS1_HIGH 0x2130
#define GXHT30_PAM_MPS1_MEDIUM 0x2126
#define GXHT30_PAM_MPS1_LOW 0x212D
#define GXHT30_PAM_MPS2_HIGH 0x2236
#define GXHT30_PAM_MPS2_MEDIUM 0x2220
#define GXHT30_PAM_MPS2_LOW 0x222B
#define GXHT30_PAM_MPS4_HIGH 0x2334
#define GXHT30_PAM_MPS4_MEDIUM 0x2322
#define GXHT30_PAM_MPS4_LOW 0x2329
#define GXHT30_PAM_MPS10_HIGH 0x2737
#define GXHT30_PAM_MPS10_MEDIUM 0x2721
#define GXHT30_PAM_MPS10_LOW 0x272A

// Accelerated response time mode
#define GXHT30_ART 0x2B32

// Read-out of periodic data acquisition
#define GXHT30_FETCH_DATA 0xE000

// Stop periodic data acquisition mode
#define GXHT30_PAM_STOP 0x3093

// Heater
#define GXHT30_HEATER_ENABLE 0x306D
#define GXHT30_HEATER_DISABLE 0x3066

// Reset
#define GXHT30_RESET_SOFT 0x30A2
#define GXHT30_RESET_GENERAL_CALL 0x0006

// Status register
#define GXHT30_STRG_READ 0xF32D
#define GXHT30_STRG_CLEAR 0x3041
#define GXHT30_STRG_ALERT_PENDING 8000
#define GXHT30_STRG_ALERT_RH 0x800
#define GXHT30_STRG_ALERT_T 0x400
#define GXHT30_STRG_HEATER 0x2000
#define GXHT30_STRG_RESET_DETECTED 0x10
#define GXHT30_STRG_LAST_COMMAND 0x2
#define GXHT30_STRG_CHEKSUM 0x1

// Data conversion
#define GXHT30_CONVERSION_FALSE 0x00
#define GXHT30_CONVERSION_TRUE 0x01
#define GXHT30_INVALID_DATA 0xFFFF

// Private defines
#define GXHT30_LSB 0
#define GXHT30_MSB 1

class GXHT30 {
    public:
        // Variables
        uint8_t sensor_address;

        // Function declarations
        uint8_t request_to_gxht30(uint16_t request);
        uint16_t* get_temp_and_rh(uint8_t convert);
        uint16_t request_status_register(uint16_t request);

        // Constructor
        GXHT30(uint8_t gxht30_address = GXHT30_ADDRESS_DEFAULT);

    private:
        // Variable declarations
        uint8_t is_continuous_dacqm = 0;
        uint8_t is_clk_stretching = 0;
        uint16_t last_continuous_dacqm;
        uint16_t temp_rh[2];
        // 8-bit CRC LUT (polynomial 0x31)
        const uint8_t crc8x_lut[256] = {
        0x00,0x31,0x62,0x53,0xC4,0xF5,0xA6,0x97,0xB9,0x88,0xDB,0xEA,0x7D,0x4C,0x1F,0x2E,
        0x43,0x72,0x21,0x10,0x87,0xB6,0xE5,0xD4,0xFA,0xCB,0x98,0xA9,0x3E,0x0F,0x5C,0x6D,
        0x86,0xB7,0xE4,0xD5,0x42,0x73,0x20,0x11,0x3F,0x0E,0x5D,0x6C,0xFB,0xCA,0x99,0xA8,
        0xC5,0xF4,0xA7,0x96,0x01,0x30,0x63,0x52,0x7C,0x4D,0x1E,0x2F,0xB8,0x89,0xDA,0xEB,
        0x3D,0x0C,0x5F,0x6E,0xF9,0xC8,0x9B,0xAA,0x84,0xB5,0xE6,0xD7,0x40,0x71,0x22,0x13,
        0x7E,0x4F,0x1C,0x2D,0xBA,0x8B,0xD8,0xE9,0xC7,0xF6,0xA5,0x94,0x03,0x32,0x61,0x50,
        0xBB,0x8A,0xD9,0xE8,0x7F,0x4E,0x1D,0x2C,0x02,0x33,0x60,0x51,0xC6,0xF7,0xA4,0x95,
        0xF8,0xC9,0x9A,0xAB,0x3C,0x0D,0x5E,0x6F,0x41,0x70,0x23,0x12,0x85,0xB4,0xE7,0xD6,
        0x7A,0x4B,0x18,0x29,0xBE,0x8F,0xDC,0xED,0xC3,0xF2,0xA1,0x90,0x07,0x36,0x65,0x54,
        0x39,0x08,0x5B,0x6A,0xFD,0xCC,0x9F,0xAE,0x80,0xB1,0xE2,0xD3,0x44,0x75,0x26,0x17,
        0xFC,0xCD,0x9E,0xAF,0x38,0x09,0x5A,0x6B,0x45,0x74,0x27,0x16,0x81,0xB0,0xE3,0xD2,
        0xBF,0x8E,0xDD,0xEC,0x7B,0x4A,0x19,0x28,0x06,0x37,0x64,0x55,0xC2,0xF3,0xA0,0x91,
        0x47,0x76,0x25,0x14,0x83,0xB2,0xE1,0xD0,0xFE,0xCF,0x9C,0xAD,0x3A,0x0B,0x58,0x69,
        0x04,0x35,0x66,0x57,0xC0,0xF1,0xA2,0x93,0xBD,0x8C,0xDF,0xEE,0x79,0x48,0x1B,0x2A,
        0xC1,0xF0,0xA3,0x92,0x05,0x34,0x67,0x56,0x78,0x49,0x1A,0x2B,0xBC,0x8D,0xDE,0xEF,
        0x82,0xB3,0xE0,0xD1,0x46,0x77,0x24,0x15,0x3B,0x0A,0x59,0x68,0xFF,0xCE,0x9D,0xAC
        };

        // Function declarations
        uint8_t split_request(
            uint16_t* req,
            uint8_t significance
        );
        uint8_t check_crc(
            uint8_t* data,
            uint8_t is_status_register
        );
        void set_clk_stretching(uint8_t req);
        void mark_invalid_data(
            uint8_t* data,
            uint8_t data_length,
            uint8_t data_validity
        );
        uint8_t transmit_request(uint16_t* req);
        void convert_temp(uint8_t* data);
        void convert_rh(uint8_t* data);
        void convert_temp_and_rh(uint8_t* data);
};
